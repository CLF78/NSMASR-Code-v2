--- background.py
+++ background.py
@@ -49,11 +49,27 @@
         self.createBGSettings(z)
         self.createBGViewers(z)
 
+        self.fixedBgALabel = QtWidgets.QLabel('Fixed BGA ID:')
+        self.fixedBgASetting = HexSpinBox()
+        self.fixedBgASetting.setRange(0, 0xFFFF)
+        self.fixedBgASetting.setValue(z.bg4A)
+        self.fixedBgASetting.setToolTip('Sets a fixed background that will appear at the start of the zone and not loop.')
+
+        self.fixedBgBLabel = QtWidgets.QLabel('Fixed BGB ID:')
+        self.fixedBgBSetting = HexSpinBox()
+        self.fixedBgBSetting.setRange(0, 0xFFFF)
+        self.fixedBgBSetting.setValue(z.bg4B)
+        self.fixedBgBSetting.setToolTip('Sets a fixed background that will appear at the start of the zone and not loop.')
+
         mainLayout = QtWidgets.QGridLayout()
         mainLayout.addWidget(self.BGASettings, 0, 0)
         mainLayout.addWidget(self.BGBSettings, 1, 0)
         mainLayout.addWidget(self.BGAViewer, 0, 1)
         mainLayout.addWidget(self.BGBViewer, 1, 1)
+        mainLayout.addWidget(self.fixedBgALabel, 2, 0)
+        mainLayout.addWidget(self.fixedBgASetting, 3, 0)
+        mainLayout.addWidget(self.fixedBgBLabel, 4, 0)
+        mainLayout.addWidget(self.fixedBgBSetting, 5, 0)
         self.setLayout(mainLayout)
 
         self.updatePreviews()
--- editors.py
+++ editors.py
@@ -87,6 +87,27 @@
         self.cpDirection.setToolTip(globals_.trans.string('EntranceDataEditor', 26))
         self.cpDirection.activated.connect(self.HandleCpDirectionChanged)
 
+        self.destMapNode = QtWidgets.QSpinBox()
+        self.destMapNode.setRange(0, 255)
+        self.destMapNode.setToolTip('Changes the node the player will end up on in the world map.')
+        self.destMapNode.valueChanged.connect(self.HandleMapNodeChanged)
+
+        self.destWorld = QtWidgets.QSpinBox()
+        self.destWorld.setRange(0, 10)
+        self.destWorld.setToolTip('Changes the world the player will end up on when entering.')
+        self.destWorld.valueChanged.connect(self.HandleWorldChanged)
+
+        self.destLevel = QtWidgets.QSpinBox()
+        self.destLevel.setRange(0, 99)
+        self.destLevel.setToolTip('Changes the level the player will end up on when entering.')
+        self.destLevel.valueChanged.connect(self.HandleLevelChanged)
+
+        self.clearWithSecretCheckbox = QtWidgets.QCheckBox('Clear With Secret Exit')
+        self.clearWithSecretCheckbox.clicked.connect(self.HandleSecretExitCheckboxClicked)
+
+        self.noSaveCheckbox = QtWidgets.QCheckBox('Discard Level Progress')
+        self.noSaveCheckbox.clicked.connect(self.HandleNoSaveCheckboxClicked)
+
         # create a layout
         layout = QtWidgets.QGridLayout()
         self.setLayout(layout)
@@ -124,14 +145,28 @@
         layout.addWidget(self.forwardPipeCheckbox, 8, 0, 1, 2)  # , QtCore.Qt.AlignRight)
         layout.addWidget(self.connectedPipeCheckbox, 8, 2, 1, 2)  # , QtCore.Qt.AlignRight)
 
+        self.warpHorzLine = createHorzLine()
+        layout.addWidget(self.warpHorzLine, 9, 0, 1, 4)
+        self.destMapNodeLabel = QtWidgets.QLabel('Destination Map Node:')
+        layout.addWidget(self.destMapNodeLabel, 10, 0, 1, 1, QtCore.Qt.AlignRight)
+        layout.addWidget(self.destMapNode, 10, 1, 1, 1)
+        self.destWorldLabel = QtWidgets.QLabel('Destination World:')
+        layout.addWidget(self.destWorldLabel, 10, 2, 1, 1, QtCore.Qt.AlignRight)
+        layout.addWidget(self.destWorld, 10, 3, 1, 1)
+        self.destLevelLabel = QtWidgets.QLabel('Destination Level:')
+        layout.addWidget(self.destLevelLabel, 11, 2, 1, 1, QtCore.Qt.AlignRight)
+        layout.addWidget(self.destLevel, 11, 3, 1, 1)
+        layout.addWidget(self.clearWithSecretCheckbox, 12, 0, 1, 1)
+        layout.addWidget(self.noSaveCheckbox, 12, 2, 1, 1)
+
         self.cpHorzLine = createHorzLine()
-        layout.addWidget(self.cpHorzLine, 9, 0, 1, 4)
-        layout.addWidget(self.connectedPipeReverseCheckbox, 10, 0, 1, 2)  # , QtCore.Qt.AlignRight)
-        layout.addWidget(self.pathID, 10, 3, 1, 1)
-        layout.addWidget(self.pathIDLabel, 10, 2, 1, 1, QtCore.Qt.AlignRight)
+        layout.addWidget(self.cpHorzLine, 13, 0, 1, 4)
+        layout.addWidget(self.connectedPipeReverseCheckbox, 14, 0, 1, 2)  # , QtCore.Qt.AlignRight)
+        layout.addWidget(self.pathID, 14, 3, 1, 1)
+        layout.addWidget(self.pathIDLabel, 14, 2, 1, 1, QtCore.Qt.AlignRight)
 
-        layout.addWidget(self.cpDirectionLabel, 11, 0, 1, 2, QtCore.Qt.AlignRight)
-        layout.addWidget(self.cpDirection, 11, 2, 1, 2)
+        layout.addWidget(self.cpDirectionLabel, 15, 0, 1, 2, QtCore.Qt.AlignRight)
+        layout.addWidget(self.cpDirection, 15, 2, 1, 2)
 
         self.ent = None
         self.UpdateFlag = False
@@ -179,6 +214,22 @@
         self.cpHorzLine.setVisible(ent.enttype in self.CanUseFlag8 and ((ent.entsettings & 8) != 0))
 
         self.activeLayer.setCurrentIndex(ent.entlayer)
+        self.exit_level_checkbox.setChecked(ent.leave_level)
+
+        self.warpHorzLine.setVisible(ent.leave_level)
+        self.destMapNodeLabel.setVisible(ent.leave_level)
+        self.destMapNode.setVisible(ent.leave_level)
+        self.destMapNode.setValue(ent.destmapnode)
+        self.destWorldLabel.setVisible(ent.leave_level)
+        self.destWorld.setVisible(ent.leave_level)
+        self.destWorld.setValue(ent.destworld)
+        self.destLevelLabel.setVisible(ent.leave_level)
+        self.destLevel.setVisible(ent.leave_level)
+        self.destLevel.setValue(ent.destlevel)
+        self.clearWithSecretCheckbox.setVisible(ent.leave_level)
+        self.clearWithSecretCheckbox.setChecked((ent.entsettings & 0x100) != 0)
+        self.noSaveCheckbox.setVisible(ent.leave_level)
+        self.noSaveCheckbox.setChecked((ent.entsettings & 0x200) != 0)
 
         self.UpdateFlag = False
 
@@ -220,6 +271,15 @@
         self.cpDirectionLabel.setVisible(self.ent.enttype in self.CanUseFlag8 and ((self.ent.entsettings & 8) != 0))
         self.cpHorzLine.setVisible(self.ent.enttype in self.CanUseFlag8 and ((self.ent.entsettings & 8) != 0))
         self.forwardPipeCheckbox.setVisible(i in self.CanUseFlag4)
+        self.warpHorzLine.setVisible(self.ent.leave_level)
+        self.destMapNodeLabel.setVisible(self.ent.leave_level)
+        self.destMapNode.setVisible(self.ent.leave_level)
+        self.destWorldLabel.setVisible(self.ent.leave_level)
+        self.destWorld.setVisible(self.ent.leave_level)
+        self.destLevelLabel.setVisible(self.ent.leave_level)
+        self.destLevel.setVisible(self.ent.leave_level)
+        self.clearWithSecretCheckbox.setVisible(self.ent.leave_level)
+        self.noSaveCheckbox.setVisible(self.ent.leave_level)
         if self.UpdateFlag: return
         SetDirty()
         self.ent.enttype = i
@@ -277,6 +337,15 @@
         """
         Handle the Send to World Map checkbox being clicked
         """
+        self.warpHorzLine.setVisible(checked)
+        self.destMapNodeLabel.setVisible(checked)
+        self.destMapNode.setVisible(checked)
+        self.destWorldLabel.setVisible(checked)
+        self.destWorld.setVisible(checked)
+        self.destLevelLabel.setVisible(checked)
+        self.destLevel.setVisible(checked)
+        self.clearWithSecretCheckbox.setVisible(checked)
+        self.noSaveCheckbox.setVisible(checked)
         if self.UpdateFlag or self.ent.leave_level == checked: return
         SetDirty()
         self.ent.leave_level = checked
@@ -346,6 +415,51 @@
         SetDirty()
         self.ent.cpdirection = i
 
+    def HandleMapNodeChanged(self, i):
+        """
+        Handler for the map node ID changing
+        """
+        if self.UpdateFlag: return
+        SetDirty()
+        self.ent.destmapnode = i
+
+    def HandleWorldChanged(self, i):
+        """
+        Handler for the world number changing
+        """
+        if self.UpdateFlag: return
+        SetDirty()
+        self.ent.destworld = i
+
+    def HandleLevelChanged(self, i):
+        """
+        Handler for the level number changing
+        """
+        if self.UpdateFlag: return
+        SetDirty()
+        self.ent.destlevel = i
+
+    def HandleSecretExitCheckboxClicked(self, checked):
+        """
+        Handle for the warp with secret exit option being clicked
+        """
+        if self.UpdateFlag: return
+        SetDirty()
+        if checked:
+            self.ent.entsettings |= 0x100
+        else:
+            self.ent.entsettings &= ~0x100
+
+    def HandleNoSaveCheckboxClicked(self, checked):
+        """
+        Handle for the warp without saving option being clicked
+        """
+        if self.UpdateFlag: return
+        SetDirty()
+        if checked:
+            self.ent.entsettings |= 0x200
+        else:
+            self.ent.entsettings &= ~0x200
 
 class PathNodeEditorWidget(QtWidgets.QWidget):
     """
--- levelitems.py
+++ levelitems.py
@@ -183,6 +183,9 @@
     Definition of an instance of EntranceItem
     """
     fieldNames = (
+        'destmapnode',
+        'destworld',
+        'destlevel',
         'entid',
         'destarea',
         'destentrance',
@@ -1300,7 +1303,8 @@
         self.bg1A = bgABlock[5]
         self.bg2A = bgABlock[6]
         self.bg3A = bgABlock[7]
-        self.ZoomA = bgABlock[8]
+        self.bg4A = bgABlock[8]
+        self.ZoomA = bgABlock[9]
 
         bgBBlock = None
         id = self.block6id
@@ -1315,7 +1319,8 @@
         self.bg1B = bgBBlock[5]
         self.bg2B = bgBBlock[6]
         self.bg3B = bgBBlock[7]
-        self.ZoomB = bgBBlock[8]
+        self.bg4B = bgBBlock[8]
+        self.ZoomB = bgBBlock[9]
 
         self.dragging = False
         self.dragstartx = -1
@@ -2518,7 +2523,7 @@
             """
             return self.BoundingRect
 
-    def __init__(self, x, y, id, destarea, destentrance, type, zone, layer, path, settings, leave_level_val, cpd):
+    def __init__(self, x, y, destmapnode, destworld, destlevel, id, destarea, destentrance, type, zone, layer, path, settings, leave_level_val, cpd):
         """
         Creates an entrance with specific data
         """
@@ -2535,6 +2540,9 @@
         self.objx = x
         self.objy = y
         self.entid = id
+        self.destmapnode = destmapnode
+        self.destworld = destworld
+        self.destlevel = destlevel
         self.destarea = destarea
         self.destentrance = destentrance
         self.enttype = type
--- level.py
+++ level.py
@@ -529,7 +529,7 @@
         Loads block 7, the entrances
         """
         entdata = self.blocks[6]
-        entstruct = struct.Struct('>HHxxxxBBBBxBBBHBB')
+        entstruct = struct.Struct('>HHxBBBBBBBxBBBHBB')
 
         entrances = []
         for offset in range(0, len(entdata), 20):
@@ -545,7 +545,7 @@
         loaded for calculating the sprites that are forced to load.
         """
         spritedata = self.blocks[7]
-        sprstruct = struct.Struct('>HHH8sxx')
+        sprstruct = struct.Struct('>HHH10s')
         sprites = []
 
         unpack = sprstruct.unpack_from
@@ -590,7 +590,7 @@
         Loads block 5, the top level background values
         """
         bgAdata = self.blocks[4]
-        bgAstruct = struct.Struct('>xBhhhhHHHxxxBxxxx')
+        bgAstruct = struct.Struct('>xBhhhhHHHHxBxxxx')
         bgA = []
 
         for offset in range(0, len(bgAdata), 24):
@@ -603,7 +603,7 @@
         Loads block 6, the bottom level background values
         """
         bgBdata = self.blocks[5]
-        bgBstruct = struct.Struct('>xBhhhhHHHxxxBxxxx')
+        bgBstruct = struct.Struct('>xBhhhhHHHHxBxxxx')
         bgB = []
 
         for offset in range(0, len(bgBdata), 24):
@@ -828,7 +828,7 @@
         Saves the entrances back to block 7
         """
         offset = 0
-        entstruct = struct.Struct('>HHxxxxBBBBxBBBHBB')
+        entstruct = struct.Struct('>HHxBBBBBBBxBBBHBB')
         buffer = bytearray(len(self.entrances) * 20)
         f_MapPositionToZoneID = SLib.MapPositionToZoneID
         zonelist = self.zones
@@ -843,6 +843,7 @@
                 zoneID = 0
 
             entstruct.pack_into(buffer, offset, int(entrance.objx), int(entrance.objy),
+                                int(entrance.destmapnode), int(entrance.destworld), int(entrance.destlevel),
                                 int(entrance.entid), int(entrance.destarea), int(entrance.destentrance),
                                 int(entrance.enttype), zoneID, int(entrance.entlayer), int(entrance.entpath),
                                 int(entrance.entsettings), int(entrance.leave_level), int(entrance.cpdirection))
@@ -891,7 +892,7 @@
         Saves the sprites back to block 8
         """
         offset = 0
-        sprstruct = struct.Struct('>HHH6sBcxx')
+        sprstruct = struct.Struct('>HHH6sBc2s')
         buffer = bytearray((len(self.sprites) * 16) + 4)
         f_int = int
         for sprite in self.sprites:
@@ -905,7 +906,7 @@
 
             try:
                 sprstruct.pack_into(buffer, offset, f_int(sprite.type) % 0xFFFF, f_int(sprite.objx), f_int(sprite.objy),
-                                    sprite.spritedata[:6], sprite.zoneID, bytes([sprite.spritedata[7]]))
+                                    sprite.spritedata[:6], sprite.zoneID, bytes([sprite.spritedata[7]]), sprite.spritedata[8:])
             except:
                 # Hopefully this will solve the mysterious bug, and will
                 # soon no longer be necessary.
@@ -945,8 +946,8 @@
         Saves blocks 10, 3, 5 and 6, the zone data, boundings, bgA and bgB data respectively
         """
         bdngstruct = struct.Struct('>4lHHhh')
-        bgAstruct = struct.Struct('>xBhhhhHHHxxxBxxxx')
-        bgBstruct = struct.Struct('>xBhhhhHHHxxxBxxxx')
+        bgAstruct = struct.Struct('>xBhhhhHHHHxBxxxx')
+        bgBstruct = struct.Struct('>xBhhhhHHHHxBxxxx')
         zonestruct = struct.Struct('>HHHHHHBBBBxBBBBxBB')
 
         zcount = len(self.zones)
@@ -973,12 +974,12 @@
 
             bgAstruct.pack_into(buffer4, offset,
                 new_bga_id, z.XscrollA, z.YscrollA, z.YpositionA,
-                z.XpositionA, z.bg1A, z.bg2A, z.bg3A, z.ZoomA
+                z.XpositionA, z.bg1A, z.bg2A, z.bg3A, z.bg4A, z.ZoomA
             )
 
             bgBstruct.pack_into(buffer5, offset,
                 new_bgb_id, z.XscrollB, z.YscrollB, z.YpositionB,
-                z.XpositionB, z.bg1B, z.bg2B, z.bg3B, z.ZoomB
+                z.XpositionB, z.bg1B, z.bg2B, z.bg3B, z.bg4B, z.ZoomB
             )
 
             zonestruct.pack_into(buffer9, offset,
--- misc.py
+++ misc.py
@@ -625,7 +625,7 @@
             b = 4 * (nybble - 1) + bits
 
             # Check if the resulting range would be valid.
-            if not 1 <= a < b + 1 <= 65:
+            if not 1 <= a < b + 1 <= 81:
                 raise ValueError("Indexed bits out of bounds: " + str(range_) + "->" + str((a, b + 1)))
 
             bit_length += b - a + 1
--- reggie.py
+++ reggie.py
@@ -1773,8 +1773,8 @@
         # get sprites
         for item in clipboard_s:
             data = item.spritedata
-            convclip.append('1:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d' % (
-            item.type, item.objx, item.objy, data[0], data[1], data[2], data[3], data[4], data[5], data[7]))
+            convclip.append('1:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d' % (
+            item.type, item.objx, item.objy, data[0], data[1], data[2], data[3], data[4], data[5], data[7], data[8], data[9]))
 
         convclip.append('%')
         return '|'.join(convclip)
@@ -1913,11 +1913,11 @@
 
                 elif split[0] == '1':
                     # sprite
-                    if len(split) != 11: continue
+                    if len(split) != 13: continue
 
                     objx = int(split[2])
                     objy = int(split[3])
-                    data = bytes(map(int, [split[4], split[5], split[6], split[7], split[8], split[9], '0', split[10]]))
+                    data = bytes(map(int, [split[4], split[5], split[6], split[7], split[8], split[9], '0', split[10], split[11], split[12]]))
 
                     newitem = self.CreateSprite(objx, objy, int(split[1]), data)
                     sprites.append(newitem)
@@ -2133,7 +2133,7 @@
             print("ReggieWindow#CreateEntrance: Given entrance id (%d) already in use" % id_)
             return None
 
-        ent = EntranceItem(x, y, id_, 0, 0, 0, 0, 0, 0, 0x80, 0, 0)
+        ent = EntranceItem(x, y, 0, 0, 0, id_, 0, 0, 0, 0, 0, 0, 0x80, 0, 0)
         ent.positionChanged = self.HandleEntPosChange
         ent.listitem = ListWidgetItem_SortsByOther(ent)
 
@@ -2221,8 +2221,8 @@
             id_ = len(globals_.Area.zones) + 1
 
         default_bounding = [[0, 0, 0, 0, 0, 15, 0, 0]]
-        default_bga = [[0, 2, 2, 0, 0, 10, 10, 10, 0]]
-        default_bgb = [[0, 1, 1, 0, 0, 10, 10, 10, 0]]
+        default_bga = [[0, 2, 2, 0, 0, 10, 10, 10, 0, 0]]
+        default_bgb = [[0, 1, 1, 0, 0, 10, 10, 10, 0, 0]]
 
         zone = ZoneItem(x, y, width, height, 0, 0, id_ - 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, default_bounding, default_bga, default_bgb)
 
@@ -4208,10 +4208,12 @@
             z.bg1A = tab.hex_boxes[0][0].value()
             z.bg2A = tab.hex_boxes[0][1].value()
             z.bg3A = tab.hex_boxes[0][2].value()
+            z.bg4A = tab.fixedBgASetting.value()
 
             z.bg1B = tab.hex_boxes[1][0].value()
             z.bg2B = tab.hex_boxes[1][1].value()
             z.bg3B = tab.hex_boxes[1][2].value()
+            z.bg4B = tab.fixedBgBSetting.value()
 
     def HandleScreenshot(self):
         """
--- spriteeditor.py
+++ spriteeditor.py
@@ -255,7 +255,7 @@
         self.setLayout(mainLayout)
 
         self.spritetype = -1
-        self.data = bytes(8)
+        self.data = bytes(10)
         self.fields = []
         self.UpdateFlag = False
         self.DefaultMode = defaultmode
@@ -1720,9 +1720,10 @@
         """
         data = self.data
 
-        self.raweditor.setText('%02x%02x %02x%02x %02x%02x %02x%02x' % (
+        self.raweditor.setText('%02x%02x %02x%02x %02x%02x %02x%02x %02x%02x' % (
             data[0], data[1], data[2], data[3],
             data[4], data[5], data[6], data[7],
+            data[8], data[9]
         ))
 
         self.raweditor.setStyleSheet('')
@@ -1828,9 +1829,10 @@
 
         data = field.assign(self.data)
 
-        self.raweditor.setText('%02x%02x %02x%02x %02x%02x %02x%02x' % (
+        self.raweditor.setText('%02x%02x %02x%02x %02x%02x %02x%02x %02x%02x' % (
             data[0], data[1], data[2], data[3],
             data[4], data[5], data[6], data[7],
+            data[8], data[9]
         ))
         self.raweditor.setStyleSheet('')
 
@@ -1842,7 +1844,7 @@
         """
         self.UpdateData(bytes(8), was_automatic=False)
 
-        self.raweditor.setText("0000 0000 0000 0000")
+        self.raweditor.setText("0000 0000 0000 0000 0000")
         self.raweditor.setStyleSheet('')
 
     def UpdateData(self, new_data, exclude_update_field = None, do_update = True, was_automatic = True):
@@ -1879,7 +1881,7 @@
         raw = text.replace(' ', '')
         valid = False
 
-        if len(raw) == 16:
+        if len(raw) == 20:
             try:
                 data = bytes.fromhex(text)
                 valid = True
@@ -1901,7 +1903,7 @@
 
             x_ = mw.selObj.objx + 16
             y_ = mw.selObj.objy
-            globals_.mainWindow.CreateSprite(x_, y_, id_, data=bytes(8))
+            globals_.mainWindow.CreateSprite(x_, y_, id_, data=bytes(10))
 
             # remove this dependency, because it is now fulfilled.
             # get row of button
--- translation.py
+++ translation.py
@@ -163,6 +163,18 @@
                     '125%',
                     '150%',
                     '200%',
+                    '10%',
+                    '15%',
+                    '25%',
+                    '37.5%',
+                    '50%',
+                    '62.5%',
+                    '75%',
+                    '90%',
+                    '112.5%',
+                    '175%',
+                    '225%',
+                    '250%',
                 ),
                 16: 'Preview',
                 17: '[name] ([hex])',
